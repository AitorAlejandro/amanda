{"version":3,"file":"amanda.esm.js","sources":["../src/buildQuery.ts","../src/capitalize.ts","../src/decapitalize.ts","../src/isArray.ts","../src/isBoolean.ts","../src/isEmptyArray.ts","../src/isFunction.ts","../src/isNull.ts","../src/isNumber.ts","../src/isObject.ts","../src/isPrimitive.ts","../src/isString.ts"],"sourcesContent":["export function buildQuery(data: Record<string, string | string[]>): string {\n  const queryArray: string[][] = [];\n\n  for (const property in data) {\n    if (Array.isArray(data[property])) {\n      const dataProperty: string[] =  data[property] as string[];\n      dataProperty.forEach(item => {\n        queryArray.push([property, item]);\n      });\n    } else {\n      queryArray.push([property, data[property] as string]);\n    }\n  }\n\n  const query = new URLSearchParams(queryArray).toString();\n  return query;\n}\n","export function capitalize(str: string): string {\n  return `${str.charAt(0).toUpperCase()}${str.slice(1)}`;\n}\n","export function decapitalize(str: string): string {\n  return `${str.charAt(0).toLowerCase()}${str.slice(1)}`;\n}\n","export function isArray(arr: any): boolean {\n  return Array.isArray(arr);\n}\n","export function isBoolean(value: any): boolean {\n  return 'boolean' == typeof value;\n}\n","import { isArray } from './isArray';\n\nexport function isEmptyArray(arr: any): boolean {\n  if (isArray(arr)) {\n    return arr.length === 0;\n  }\n  throw new Error('isEmptyArray: An array must be provided as an argument');\n}\n","export function isFunction(value: any): boolean {\n  return 'function' == typeof value;\n}\n","export function isNull(value: any): boolean {\n  return null === value;\n}\n","export function isNumber(value: any): boolean {\n  return 'number' === typeof value && isFinite(value);\n}\n","import { isArray } from './isArray';\nimport { isNull } from './isNull';\n\nexport function isObject(value: any): boolean {\n  return typeof value === 'object' && !isArray(value) && !isNull(value);\n}\n","export function isPrimitive(val: any): boolean {\n  return Object(val) !== val;\n}\n","export function isString(value: any): boolean {\n  return typeof value === 'string' || value instanceof String;\n}\n"],"names":["buildQuery","data","queryArray","property","Array","isArray","dataProperty","forEach","item","push","query","URLSearchParams","toString","capitalize","str","charAt","toUpperCase","slice","decapitalize","toLowerCase","arr","isBoolean","value","isEmptyArray","length","Error","isFunction","isNull","isNumber","isFinite","isObject","isPrimitive","val","Object","isString","String"],"mappings":"SAAgBA,WAAWC;AACzB,MAAMC,UAAU,GAAe,EAA/B;;6BAEWC;AACT,QAAIC,KAAK,CAACC,OAAN,CAAcJ,IAAI,CAACE,QAAD,CAAlB,CAAJ,EAAmC;AACjC,UAAMG,YAAY,GAAcL,IAAI,CAACE,QAAD,CAApC;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAAAC,IAAI;AACvBN,QAAAA,UAAU,CAACO,IAAX,CAAgB,CAACN,QAAD,EAAWK,IAAX,CAAhB;AACD,OAFD;AAGD,KALD,MAKO;AACLN,MAAAA,UAAU,CAACO,IAAX,CAAgB,CAACN,QAAD,EAAWF,IAAI,CAACE,QAAD,CAAf,CAAhB;AACD;;;AARH,OAAK,IAAMA,QAAX,IAAuBF,IAAvB,EAA6B;AAAA,UAAlBE,QAAkB;AAS5B;;AAED,MAAMO,KAAK,GAAG,IAAIC,eAAJ,CAAoBT,UAApB,EAAgCU,QAAhC,EAAd;AACA,SAAOF,KAAP;AACD;;SChBeG,WAAWC;AACzB,cAAUA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAAV,GAAwCF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAAxC;AACD;;SCFeC,aAAaJ;AAC3B,cAAUA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcI,WAAd,EAAV,GAAwCL,GAAG,CAACG,KAAJ,CAAU,CAAV,CAAxC;AACD;;SCFeZ,QAAQe;AACtB,SAAOhB,KAAK,CAACC,OAAN,CAAce,GAAd,CAAP;AACD;;SCFeC,UAAUC;AACxB,SAAO,aAAa,OAAOA,KAA3B;AACD;;SCAeC,aAAaH;AAC3B,MAAIf,OAAO,CAACe,GAAD,CAAX,EAAkB;AAChB,WAAOA,GAAG,CAACI,MAAJ,KAAe,CAAtB;AACD;;AACD,QAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACD;;SCPeC,WAAWJ;AACzB,SAAO,cAAc,OAAOA,KAA5B;AACD;;SCFeK,OAAOL;AACrB,SAAO,SAASA,KAAhB;AACD;;SCFeM,SAASN;AACvB,SAAO,aAAa,OAAOA,KAApB,IAA6BO,QAAQ,CAACP,KAAD,CAA5C;AACD;;SCCeQ,SAASR;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACjB,OAAO,CAACiB,KAAD,CAArC,IAAgD,CAACK,MAAM,CAACL,KAAD,CAA9D;AACD;;SCLeS,YAAYC;AAC1B,SAAOC,MAAM,CAACD,GAAD,CAAN,KAAgBA,GAAvB;AACD;;SCFeE,SAASZ;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYa,MAArD;AACD;;;;"}